---
import { Theme } from "../../layouts/root/init.astro"
---

<section class="theme-selector">
	<button id="button-light-theme">
		<svg xmlns="http://www.w3.org/2000/svg" height="20px" viewBox="0 -960 960 960" width="20px">
			<path d="M480-360q50 0 85-35t35-85q0-50-35-85t-85-35q-50 0-85 35t-35 85q0 50 35 85t85 35Zm0 80q-83 0-141.5-58.5T280-480q0-83 58.5-141.5T480-680q83 0 141.5 58.5T680-480q0 83-58.5 141.5T480-280ZM200-440H40v-80h160v80Zm720 0H760v-80h160v80ZM440-760v-160h80v160h-80Zm0 720v-160h80v160h-80ZM256-650l-101-97 57-59 96 100-52 56Zm492 496-97-101 53-55 101 97-57 59Zm-98-550 97-101 59 57-100 96-56-52ZM154-212l101-97 55 53-97 101-59-57Zm326-268Z"/>
		</svg>
	</button>
	<button id="button-device-theme">
		<svg xmlns="http://www.w3.org/2000/svg" height="20px" viewBox="0 -960 960 960" width="20px">
			<path d="M320-120v-80h80v-80H160q-33 0-56.5-23.5T80-360v-400q0-33 23.5-56.5T160-840h640q33 0 56.5 23.5T880-760v400q0 33-23.5 56.5T800-280H560v80h80v80H320ZM160-360h640v-400H160v400Zm0 0v-400 400Z"/>
		</svg>
	</button>
	<button id="button-dark-theme">
		<svg xmlns="http://www.w3.org/2000/svg" height="20px" viewBox="0 -960 960 960" width="20px">
			<path d="M480-120q-150 0-255-105T120-480q0-150 105-255t255-105q14 0 27.5 1t26.5 3q-41 29-65.5 75.5T444-660q0 90 63 153t153 63q55 0 101-24.5t75-65.5q2 13 3 26.5t1 27.5q0 150-105 255T480-120Zm0-80q88 0 158-48.5T740-375q-20 5-40 8t-40 3q-123 0-209.5-86.5T364-660q0-20 3-40t8-40q-78 32-126.5 102T200-480q0 116 82 198t198 82Zm-10-270Z"/>
		</svg>
	</button>
	<script is:inline define:vars={{ Theme }}>
		const root = document.querySelector(":root")
		if (!root) { return }

		const button_device = document.getElementById("button-device-theme")
		const button_light  = document.getElementById("button-light-theme")
		const button_dark   = document.getElementById("button-dark-theme")
		if (!(button_device && button_light && button_dark)) { return }

		const savedTheme     = localStorage.getItem("theme")
		const Enum_Light_str = Theme.Light.toString()
		const Enum_Dark_str  = Theme.Dark.toString()

		function toggle_all_off() {
			button_device.classList.remove("active")
			button_light.classList.remove("active")
			button_dark.classList.remove("active")
		}
		function toggle_theme_click(button, color_theme) {
			switch (color_theme) {
				case Theme.Device:
					localStorage.removeItem("theme")
					root.setAttribute("data-theme", window.matchMedia("(prefers-color-scheme: light)").matches ? Enum_Light_str : Enum_Dark_str)
					break
				case Theme.Light:
					localStorage.setItem("theme", Enum_Light_str)
					root.setAttribute("data-theme", Enum_Light_str)
					break
				case Theme.Dark:
					localStorage.setItem("theme", Enum_Dark_str)
					root.setAttribute("data-theme", Enum_Dark_str)
					break
			}
			toggle_all_off()
			button.classList.toggle("active")
		}

		button_device.addEventListener("click", _event => toggle_theme_click(button_device, Theme.Device))
		button_light.addEventListener("click", _event => toggle_theme_click(button_light, Theme.Light))
		button_dark.addEventListener("click", _event => toggle_theme_click(button_dark, Theme.Dark))

		if (savedTheme === Enum_Light_str) {
			button_light.classList.toggle("active")
		} else if (savedTheme === Enum_Dark_str) {
			button_dark.classList.toggle("active")
		} else {
			button_device.classList.toggle("active")
		}
	</script>
	<noscript>
		<style>
			.theme-selector { visibility: hidden; }
		</style>
	</noscript>
</section>

<style>
	section {
		display: flex;
		border: 1.5px solid var(--header-border-color);
		border-radius: 10px;
		width: fit-content;
		overflow: hidden;
	}
	button {
		display: flex;
		padding: 10px;
		border: 0;
		background-color: transparent;
		outline: none;
		transition: background-color var(--button-transition-time);

		&.active {
			background-color: var(--footer-theme-active);
			transition: background-color var(--button-transition-time);

			& > svg {
				fill: var(--header-button-svg-color-hover);
				transition: fill var(--button-transition-time);
			}
		}
		&:is(:hover, :focus) > svg {
			fill: var(--header-button-svg-color-hover);
			transition: fill var(--header-button-transition-time);
		}
	}
	svg {
		fill: var(--footer-button-svg-color);
		transition: fill var(--header-button-transition-time);
	}
</style>